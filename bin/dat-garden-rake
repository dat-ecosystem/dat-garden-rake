#!/usr/bin/env node
function assertVersion (version, minMajor, minMinor) {
  const parts = /^v(\d+).(\d+)/g.exec(version)
  const major = parseInt(parts[1], 10)
  const minor = parseInt(parts[2], 10)
  if (major < minMajor || (major === minMajor && minor < minMinor)) {
    throw new Error(`Node version ${minMajor}.${minMinor} required.`)
  }
}

assertVersion(process.version, 18, 3)

const { parseArgs } = require('node:util')

const controller = new AbortController()
process.on('SIGINT', () => controller.abort())

const { values } = parseArgs({
  options: {
    help: {
      type: 'boolean',
      short: 'h'
    },
    reset: {
      type: 'boolean'
    },
    restart: {
      type: 'boolean'
    },
    retry: {
      type: 'boolean'
    },
    out: {
      type: 'string',
      short: 'o'
    },
    blessed: {
      type: 'string',
      short: 'b'
    },
    concurrency: {
      type: 'string',
      short: 'x'
    },
    'max-retries': {
      type: 'string',
      short: 'r'
    },
    'max-depth': {
      type: 'string',
      short: 'd'
    },
    state: {
      type: 'string',
      short: 's'
    },
    cache: {
      type: 'string'
    },
    'prefer-cache': {
      type: 'boolean'
    },
    quiet: {
      type: 'boolean'
    },
    'out-mode': {
      type: 'string'
    },
    github: {
      type: 'string'
    },
    gitlab: {
      type: 'string'
    },
    'skip-times': {
      type: 'boolean'
    }
  },
  strict: true
})
if (values.help) {
  console.log(`dat-garden-rake [...options]

--reset ............. clears ALL current data!
--restart ........... clears all tasks but keeps the data
--retry ............. removes all errors from tasks
--help, -h .......... show this help
--out, -o ........... output folder (default=./out)
--state, -s ......... state folder (default=./state)
--cache ............. cache folder (default=./cache)
--prefer-cache ...... always use the cached data (recommended for development)
--blessed, -b ....... blessed file location (default=./blessed.json)
--concurrency, -x ... max concurrent processes (default=10)
--max-retries, -r ... how often to retry failed tasks (default=2)
--max-depth, -d ..... max depth of dependents to look up (default=5)
--quiet ............. minimal output only.
--skip-times ........ skip times in output (good for updating git data)
--out-mode .......... mode how the output should be written to a folder:
    'history' (default) ... for creating a new folder and maintaining an index.json (good for dev)
    'override' ............ to write the current version to the folder as-is (good for deploy)

--github ............ Github token, falls back to GITHUB_TOKEN environment variable
--gitlab ............ Gitlab token, falls back to GITLAB_TOKEN environment variable
`)
  process.exit()
}

function coerceNumber (opt, fallback) {
  if (!opt) {
    return fallback
  }
  const num = parseInt(opt, 10)
  if (isNaN(num)) {
    return fallback
  }
  if (num.toString() === opt) {
    return num
  }
  return fallback
}

const options = {
  state: values.state ?? 'state',
  cache: values.cache ?? 'cache',
  preferCache: values['prefer-cache'] ?? false,
  reset: values.reset ?? false,
  restart: values.restart ?? false,
  retry: values.retry ?? false,
  quiet: values.quiet ?? false,
  maxRetries: coerceNumber(values['max-retries'], 2),
  maxDepth: coerceNumber(values['max-depth'], 5),
  outFolder: values.out ?? './out',
  outMode: values['out-mode']?.trim().toLowerCase() ?? 'history',
  blessedFile: values.blessed ?? './blessed.json',
  concurrency: values.concurrency ? parseInt(values.concurrency) : 10,
  signal: controller.signal,
  skipTimes: values['skip-times'] ?? false,
  token: {
    github: values.github ?? process.env.GITHUB_TOKEN,
    gitlab: values.gitlab ?? process.env.GITLAB_TOKEN
  }
}
import('../index.mjs').then(({ scrape }) => scrape(options))
